---

- name: Create borg config & temporary data directories
  file:
    path: "{{ borgbackup_home }}/{{ item }}"
    state: directory
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: "0700"
  loop:
    - config
    - data

- name: Create backup SSH key
  openssh_keypair:
    path: "{{ borgbackup_home }}/config/id_ssh_ed25519"
    comment: "{{ borgbackup_user }}@{{ ansible_facts.fqdn }}"
    type: ed25519
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"

- name: Configure backup directories
  blockinfile:
    path: "{{ borgbackup_home }}/config/patterns"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    create: yes
    block: |
      {% for folder in borgbackup_directories %}
      R {{ folder }}
      {% endfor %}
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: "0600"

- name: Configure exclude patterns
  blockinfile:
    path: "{{ borgbackup_home }}/config/excludes"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    create: yes
    block: "{{'\n'.join(borgbackup_exclude_patterns) }}"
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: "0600"

- name: Install borg wrapper script
  copy:
    dest: "{{ borgbackup_home }}/config/borg.sh"
    content: |
      #!/bin/bash
      set -a
      source {{ borgbackup_home }}/config/environment
      set +a
      exec {{ borgbackup_executable }} "$@"
    mode: "0700"
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"

- name: Install borg service files
  template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    mode: "0644"
  loop:
    - borgbackup-tasks.service
    - borgbackup.service
    - borgbackup.timer
  notify: Reload systemd

- name: Flush handlers to reload systemd
  meta: flush_handlers

- name: Enable systemd timer service
  systemd:
    name: borgbackup.timer
    enabled: yes
    state: started

- name: Configure inventory server for client access
  include_tasks: configure_server.yml
  when: borgbackup_repository_server is defined

- name: Configure borgbase.com for client access
  include_tasks: configure_borgbase.yml
  when: borgbackup_bb_repo is defined

- name: Upload environment file for repository & passphrase
  template:
    src: environment.j2
    dest: "{{ borgbackup_home }}/config/environment"
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: "0600"
  no_log: yes

- name: Configure and possibly prepare repository
  become: yes
  become_user: "{{ borgbackup_user }}"
  block:

    - name: Configure known_hosts from config
      known_hosts:
        path: "{{ borgbackup_home }}/config/known_hosts"
        name: "{{ item.split()[0] }}"
        key: "{{ item }}"
        state: present
      loop: "{{ borgbackup_known_hosts }}"
      loop_control:
        label: "{{ ' '.join(item.split()[:2]) }} ..."
      when: borgbackup_known_hosts is defined

    - name: Configure known_hosts from inventory server
      known_hosts:
        path: "{{ borgbackup_home }}/config/known_hosts"
        name: "{{ hostvars[borgbackup_repository_server].ansible_facts.fqdn }}"
        key: >-
          {{ hostvars[borgbackup_repository_server].ansible_facts.fqdn }}
          {{ item.ssh_algo }}
          {{ hostvars[borgbackup_repository_server].ansible_facts[item.fact] }}
        state: present
      loop:
        - {fact: ssh_host_key_ecdsa_public, ssh_algo: ecdsa-sha2-nistp256}
        - {fact: ssh_host_key_ed25519_public, ssh_algo: ssh-ed25519}
        - {fact: ssh_host_key_rsa_public, ssh_algo: ssh-rsa}
      loop_control:
        label: "{{ borgbackup_repository_server|default('undefined') }} {{ item.ssh_algo }} ..."
      when: borgbackup_repository_server is defined

    - name: Init backup repository
      command: "{{ borgbackup_home }}/config/borg.sh init --encryption repokey-blake2"
      register: borg_repo_init
      failed_when: "borg_repo_init.rc == 2 and 'A repository already exists at ' not in borg_repo_init.stderr|default('')"
      changed_when: "borg_repo_init.rc == 0"
      when: borgbackup_auto_init
